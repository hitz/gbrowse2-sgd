[GENERAL]
description   = S. cerevisiae Proteome Browser from Saccharomyces Genome Database (SGD)
db_adaptor    = Bio::DB::GFF
db_args       = -adaptor dbi::mysql
	        -dsn     dbi:mysql:database=scproteome;host=localhost;mysql_socket=/db0/mysql/admin/sgd/mysql.sock
user          = selector
pass          = pet1Flew

verbose = 1

units = aa
image cachetime = 120

# zoom levels
zoom levels = 25 50 100 150 200 400 800 1600 2000 5000

#plugins = AttributeHiliter 
plugins = FastaDumper GFFDumper BatchDumper

# 'region' or 'contig' would be other typical choices,
#reference class  = protein - disables nav buttons with current db

# Web site configuration info
stylesheet  = /css/sgd-gbrowse.css
buttons     = /gbrowse/images/buttons
js          = /gbrowse/js
tmpimages   = /gbrowse/tmp

show sources = 1
default varying = 1 # tracks appear as defined below, not in alphabetical order

# where to link to when user clicks in detailed view
link        = "/cgi-bin/locus.pl?locus=$name"; 

# what image widths to offer
image widths  = 640 800 1024 1280

# default width of detailed view (pixels)
default width = 800
default features = ORF HydropathyPlot HMMDomains SignalP TMHMM Profile

# max and default segment sizes for detailed view
max segment     = 1000000
default segment = 500


# colors of the overview, detailed map and key
overview bgcolor = lightgrey
detailed bgcolor = lightgoldenrodyellow
key bgcolor      = beige
truecolor        = 0

# examples to show in the introduction
examples = NOT1 YDR007W Ribosome "Transmembrane Protein"

# "automatic" classes to try when an unqualified identifier is given
automatic classes = protein Sequence

language = en

keystyle = between
empty_tracks = key
empty_tracks = dashed

# a footer
header = sub {
	       use lib '../lib';
	       use WWW::FormatPage qw(:formatPage);
	       my $head = &tool_bar;
	       return $head.qq{<table class="sgdhead" cellpadding="2" width="100%" cellspacing="0" border="0"><tr><td colspan="4" class="sgdhead" align="right"><a href="/cgi-bin/gbrowse/?help=general"><img valign="MIDDLE" align="RIGHT" alt="Help" border="0" src="/images/help-button.gif"></a></td></tr></table><br>};
	   }
	       
footer = <hr><font size="-2">SGD<sup>tm</sup> Database Copyright &#169 1997-2010 The Board of Trustees of Leland Stanford Junior University. Permission to use the information contained in this database was given by the researchers/institutes who contributed or published the information. Users of the database are solely responsible for compliance with any copyright restrictions, including those applying to the author abstracts. Documents from this server are provided "AS-IS" without any warranty, expressed or implied.</font><hr><table width="100%"><TR><TD align="LEFT" class="databody">For the source code for this browser, see the <a href="http://www.gmod.org">Generic Model Organism Database Project.</a></TD></TR></table><hr><table width="100%"><tr><td valign="top" align="left"><a href="../../../"><img border="0" src="/images/arrow.small.up.gif">Return to SGD</a></td><td valign="bottom" align="right"><form method="post" action="/cgi-bin/suggestion" enctype="application/x-www-form-urlencoded" target="infowin" name="suggestion"><input type="hidden" name="script_name" value="/cgi-bin/locus.pl"><input type="hidden" name="server_name" value="../../../"><a href="javascript:document.suggestion.submit()">Send a Message to the SGD Curators<img border="0" src="/images/mail.gif"></a></form></td></tr></table>

# Various places where you can insert your own HTML -- see configuration docs
html1 =
html2 = 
html3 = <p><table border=0 bgcolor="beige"><tr><th rowspan="2"><font color="black">The HMM Domains are color coded by source: </font></th><th align="left"><font color="darkorange">oranges/yellows = Pfam,</font><font color="red"> reds = SuperFamily,</font><font color="indigo"> purples = Gene3D,</font></th></tr><tr><th align="left"><font color="forestgreen"> greens = Panther,</font><font color="deepskyblue"> blues = TIGRFAM,</font><font color="sienna"> browns = SMART</font></th></tr></table><p>
html4 = 
html5 = 
html6 = <script type="text/javascript" src="/javascript/wz_tooltip.js"></script>
init_code = @main::rainbow = qw(red green yellow blue khaki pink orange cyan purple);
            %main::colors  = (reds => [qw(indianred salmon lightsalmon crimson red firebrick darkred hotpink)],
			      orangeyellows => [qw( gold yellow peachpuff coral tomato orangered darkorange khaki)],
			      purples => [qw(indigo purple darkviolet medium purple magenta violet pink)],
			      greens => [qw(greenyellow  forestgreen olive mediumaquamarine lime limegreen lightgreen springgreen)],
			      blues  => [qw(lightcyan lightsteelblue deepskyblue royaleblue blue darkblue cadetblue cyan)],
			      browns => [qw( sienna peru tan navajowhite saddlebrown burlywood blanchedalmond brown)]
			      );
            sub hover {
              use HTML::Template;
	      my ($name, $data) = @_;
	      my $tmpl = HTML::Template->new(filename => '/share/pastry/www-data/conf/gbrowse.conf/hover.tmpl');
#             ABOVE FILENAME MUST BE CHANGED BETWEEN PRODUCTION/DEVELOPMENT
	      $tmpl->param(DATA => $data);
	      my $str = $tmpl->output;
	      $str =~ s/'/\\'/g;
	      $str =~ s/\s+$//;
	      my $cmd = "this.T_STICKY=true;this.T_TITLE='$name';this.T_TEMP=20000";
	      $cmd = qq{" onMouseOver="$cmd;return escape('$str')};
	      return $cmd;
	    }
            sub orf_class {
		my $feature = shift;
		my $gene = $feature->attributes('Gene');
		my $orfclass = $feature->attributes('orf_classification');
		return "$gene, $orfclass" if ( defined($gene) && defined($orfclass));
		return "$orfclass" if ( defined($orfclass) );
		return $feature->attributes('Note');
	    }
            sub feat_desc {
		my $feature = shift;
		my $gene = $feature->attributes('Gene');
		my $desc = $feature->attributes('Note');
		my $orfclass = $feature->attributes('orf_classification');
		$desc =~ s/\,.*//;
		$desc =~ s/\;.*//;
		$desc =~ s/\. .*//;
		my $rtnstr = "";
		$rtnstr = "$gene, " if ( defined($gene) );
		$rtnstr .= "$orfclass, " if ( defined($orfclass) );
		$rtnstr .= "$desc" if ( defined($desc) );
		return "$rtnstr";
	    }

### TRACK CONFIGURATION ####
# the remainder of the sections configure individual tracks

[TRACK DEFAULTS]
glyph       = generic
height      = 8
bgcolor     = slateblue
fgcolor     = black
fontcolor   = black
font2color  = blue
label density = 25
bump density  = 2000

###################################
# Plugin configuration
###################################
[ORF]
# after updating bioperl we'll need to change feature line
feature        = protein
glyph          = processed_transcript
key            = ORF
bgcolor        = red
description    = \&feat_desc
link           = /cgi-bin/locus.pl?locus=$name

[HydropathyPlot]
feature      = protein 
glyph        = protein
global feature = 1
height       = 40
do_kd        = 1
fgcolor      = red
axis_color   = blue
key          = Protein/Hydropathy Plot
citation     = Kyte-Doolittle hydropathy plot

[HMMDomains]
feature      = HMMPanther Gene3D superfamily HMMPfam HMMSmart HMMTigr
glyph        = segments
font2color   = black
bgcolor      = sub {
                 my $f = shift;
		 my %colorMap = ('superfamily:sgd' => 'reds',
				 'hmmpfam:sgd' => 'orangeyellows',
				 'gene3d:sgd' => 'purples',
				 'hmmpanther:sgd' => 'greens',
				 'hmmtigr:sgd' => 'blues',
				 'hmmsmart:sgd' => 'browns');
		 my $nKeys = scalar(keys %{$main::seenPfam{$f->type}});
		 my $nCols = scalar(@{$main::colors{$colorMap{lc($f->type)}}});
                 $main::seenPfam{$f->type}{$f->name} ||= $main::colors{$colorMap{lc($f->type)}}->[$nKeys % $nCols];
#		 warn join(' : ',($f->type, $f->name, @{$main::colors{$colorMap{lc($f->type)}}}, $main::seenPfam{$f->type}{$f->name})),"\n";
		 return $main::seenPfam{$f->type}{$f->name};
               }
height       = 8 
title         = sub {
	      	 use lib '../lib';
		 use Config::ExternalURL;
              	 my $f = shift;
 	 	 my $name = $f->name;
		 $name =~ s/\"\'//g;
		 my $type = $f->type;
		 my $score = $f->score;
		 $type =~ s/^(hmm)*(.+):sgd/$2/i;
 	         my ($desc) = $f->get_tag_values("Note");
	 	 my $interproUrl = Config::ExternalURL->new->interpro_id_url;
		 $desc =~ s/(IPR[0-9]+)::/<a href=$interproUrl?ac=$1>$1<\/a> /;
		 $desc =~ s/\"\'//g;
		 my $nameText = "$name";
	         my @data;
		 push @data, { Key => 'Name:' , Value => "$name" };
		 push @data, { Key => 'Description:' , Value  => "$desc" };
		 push @data, { Key => 'Score/E-value:', Value => "$score" } if $score;
		 hover(" $type Domain: $name", \@data);
	       }
description  = 1
label        = 1
link         = sub {
                 my $f = shift;
		 use lib '../lib';
                 use Config::ExternalURL;
		 my $method = lc($f->type);
		 $method =~ s/^(hmm)*(.+):sgd/$2_domain_url_for_id/;
		 my $urlObj = Config::ExternalURL->new();
		 my $urlRoot = $urlObj->$method;
		 my $lookupId = $f->name;
		 $lookupId =~ s/(PTHR[0-9]+)_(.+)/$1:$2/;
		 $lookupId =~ s/^G3DSA_// if ($lookupId =~ /^G3DSA_/);
		 return "$urlRoot".$lookupId;
	     }
key          = HMM Domains
citation     = HMM domains

[SignalP]
feature      = SignalPHMM
glyph        = segments
font2color   = black
bgcolor      = navy
height       = 8 
label        = 0
description  = 0
key          = Signal Peptide
link         = http://www.cbs.dtu.dk/services/SignalP/background/
citation     = Signal peptide predictions by SP-HMM/SP-NN

[TMHMM]
feature      = TMHMM
glyph        = segments
font2color   = black
bgcolor      = navy
height       = 8  
title        = "Transmembrane Domain"
#               sub {
#                 my $f = shift;
#		 my $name = $f->name;
#		 my ($desc) = $f->get_tag_values("Topology");
#		 my @data;
#		 push @data, [ 'Name:'  => $name ];
#		 push @data, [ 'Topology:' => $desc ];
#		 hover("Transmembrane Domain", \@data);
#	       }
link         = http://www.cbs.dtu.dk/~krogh/TMHMM/
label        = 0
description  = 0
key          = Transmembrane Domains
citation     = Transmembrane domains detected by TmHMM

[Profile]
feature      = BlastProDom ProfileScan
glyph        = graded_segments
font2color   = black
bgcolor      = wheat
title        = sub {
                 my $f = shift;
		 my $name = $f->name;
		 $name =~ s/\"\'//g;
		 my $score = $f->score;
		 my ($desc) = $f->get_tag_values("Note");
		 $desc =~ s/\"\'//g;
	         $desc ||= "<i>unavailable</i>";
	         $desc =~ s/\001.*//;
		 my @data;
		 push @data, { Key => 'Name:', Value => "$name" };
		 push @data, { Key => 'Description:', Value  => "$desc" };
		 push @data, { Key => 'Score/E-value:', Value => "$score" } if $score;
		 hover("Profile Match: $name", \@data);
	       }
description  = 1
label        = 0
link         = sub {
                 my $f = shift;
		 use lib '../lib';
                 use Config::URL;
		 my $method;
		 $method = 'prodom' if $f->name =~ /^PD/;
		 $method = 'prosite' if $f->name =~ /^PS/;
		 $method .= "_domain_url_for_id";
		 my $urlObj = Config::URL->new();
		 my $urlRoot = $urlObj->$method;
		 my $lookupId = $f->name;
		 return "$urlRoot".$lookupId;
	     }
key          = Profile Hits
citation     = Profile Hits
