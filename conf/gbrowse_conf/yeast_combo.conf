[GENERAL]
description   =  S. cerevisiae from Saccharomyces Genome Database (SGD)
database      = scgenome

initial landmark = chr01:123000..160000

# bring in the special Submitter plugin for the rubber-band select menu                                           
plugins   = FastaDumper RestrictionAnnotator OligoFinder SequenceDumper TrackDumper Submitter BatchDumper
# OligoFinder is BUGGY ATM
autocomplete = 1


# examples to show in the introduction
examples = chr03
	chr05:80,000..120,000
	SGS1
	RPL28
	YCR065W
	flocculation
	CAATGATTACGGCATT

# "automatic" classes to try when an unqualified identifier is given
automatic classes = gene Sequence

# Advanced feature: custom balloons
custom balloons = [balloon]
                  delayTime = 500

                  [balloon500]
	          maxWidth  = 500
                  delayTime = 50


# routines to compile in advance
# NOTE THAT $feature->attributes returns an ARRAY REF in BioPerl 1.6.X/Bio::DB::SeqFeature
# I have added ($var) to all cases; assuming that there will be at most 1 useful value
# Also had to change attribute 'Gene' -> 'gene'

init_code =	sub orf_color {
			my $feature = shift;
			my ($orfclass) = $feature->attributes('orf_classification');
			my $type = $feature->type;
			return 'black' if ($type =~ /transcribed_spacer/);
			return 'lightgrey' if ($orfclass eq "Dubious");
			return 'peachpuff' if ($orfclass eq "Uncharacterized");
			return 'red' if ($orfclass eq "Verified");
			return 'green' if ($orfclass eq "silenced_gene:Verified");
			return 'brown' if ($orfclass eq "silenced_gene");
			return 'wheat';
		}
		sub orf_class {
			my $feature = shift;
			my ($gene) = $feature->attributes('gene');
			my ($orfclass) = $feature->attributes('orf_classification');
			return "$gene, $orfclass" if ( defined($gene) && defined($orfclass));
			return "$orfclass" if ( defined($orfclass) );
			return $feature->attributes('Note');
		}
		sub feat_desc {
			my $feature = shift;
			my ($gene) = $feature->attributes('gene');
			my ($desc) = $feature->attributes('Note');
			my ($orfclass) = $feature->attributes('orf_classification');
	 		$desc =~ s/^([^;\.]*?)[;,\.] .*/$1/;
			#$desc =~ s/; .+//;
			#$desc =~ s/, .+//;
			#$desc =~ s/\. .+//;
			my $rtnstr = "";
			$rtnstr = "$gene, " if ( defined($gene) );
			$rtnstr .= "$orfclass, " if ( defined($orfclass) );
			$rtnstr .= "$desc" if ( defined($desc) );
			return "$rtnstr";
		}
		sub pcr_desc {
			my $feature = shift;
			my ($desc) = $feature->attributes('Note');
			my $rtnstr = "";
			$rtnstr .= "$desc" if ( defined($desc) );
			return "$rtnstr";
		}
		sub strand_color {
			shift->strand > 0 ? 'violet' : 'turquoise';
		}
		sub codontable_check {
			my $feature = shift;
			my $ref = $feature->seq_id;
			# or $feature->ref for older bioperl
			return $ref =~ /Mit/i ? 3 : 1;
		}
		sub trunc_name {
			my $feature = shift;
			my $name = $feature->name;
			$name =~ s/\-S\d+//;
			return "$name";
		}
		sub seq_name {
			my $feature = shift;
			my ($name) = $feature->attributes('sage_tag_sequence');
			return "$name";
		}

		sub TF_url {
			my $feature = shift;
			my $name = $feature->name;
			$name =~ s/\-S\d+//;
			return "/cgi-bin/gbrowse/scgenome/?name=$name";
		}
		sub seq_color {
			my $feature = shift;
			my ($change) = $feature->attributes('change');
			return 'midnightblue' if ($change eq "IntronExonChange");
			return 'mintcream' if ($change eq "merger");
			return 'cyan' if ($change eq "CtermChange");
			return 'cornflowerblue' if ($change eq "NtermChange");
			return 'fuchsia' if ($change eq "NewORF");
			return 'yellow' if ($change eq "Deletion");
			return 'orange' if ($change eq "Insertions");
			return 'firebrick' if ($change eq "Substitution");
		}
		sub transcript_hit {
			my $feature = shift;
			my ($G) = $feature->attributes('G-cap_judgement');
			my ($hit) = $feature->attributes('genomic_hit');
			return 'orangered' if ( ($G =~ /perfect/i) && ($hit =~ /single\sgenomic\slocus/i) );
			return 'peachpuff' if ( ($G =~ /perfect/i) && ($hit =~ /multiple\sgenomic\sloci/i) );
			return 'darkblue' if ( ($G !~ /perfect/i) && ($hit =~ /single\sgenomic\slocus/i) );
			return 'lightsteelblue' if ( ($G !~ /perfect/i) && ($hit =~ /multiple\sgenomic\sloci/i) );
		}
		sub rna_glyph{ 
			my $f = shift;
			my $type = $f->type;
			return "line" if ( ($type =~ /^region/) || ($type =~ /transcribed_spacer_region/) );
			return "processed_transcript";
		}
		sub hover {
			my ($name, $data) = @_;
			my $tab = "<table><tr><th>$name</th></tr>";
			for my $dat (@$data) {
			   $tab .= "<tr><td>$dat->{Key}</td><td>$dat->{Value}</td></tr>";
			}
			return $tab;
		}

#################################
# database definitions
#################################

[scgenome:database]
description	= S. cerevisiae from Saccharomyces Genome Database (SGD)
db_adaptor	= Bio::DB::SeqFeature::Store
db_args		= -adaptor DBI::mysql
		  -dsn dbi:mysql:scgenome;host=localhost;mysql_socket=/db0/mysql/admin/gbrowse/mysql.sock
user		= selector
pass		= pet1Flew
search options = default +autocomplete

[encode:database]
description	= S. cerevisiae from Saccharomyces Genome Database (SGD)
db_adaptor	= Bio::DB::SeqFeature::Store
db_args		= -adaptor DBI::mysql
		  -dsn dbi:mysql:encode;host=localhost;mysql_socket=/db0/mysql/admin/gbrowse/mysql.sock
user		= selector
pass		= pet1Flew
search options = default +autocomplete

# Advanced feature: an example of callbacks to be run remotely
# by gbrowse_details for AJAX/iframe balloons

# Advanced feature:
# Pop up rubberband menus for submitting selected region to search engines...
#include "detail_select_menu.conf"
#include "submitter_plugin.conf"

# Default glyph settings
[TRACK DEFAULTS]
glyph       = generic
database    = scgenome
height      = 8
bgcolor     = cyan
fgcolor     = black
label density = 25
bump density  = 100
show summary  = 99999  # go into summary mode when zoomed out to 100k
# default pop-up balloon
balloon hover = <b>$name</b> is a $type spanning $ref from $start to $end. Click for more details.

### TRACK CONFIGURATION ####
# the remainder of the sections configure individual tracks

[Landmarks:overview]
feature		= region:landmark centromere:SGD
glyph		= sub { 
		my $f = shift;
		my $type = $f->type;
		return "dot" if ($type eq "centromere:SGD");
		return "span";
		}
height		= 10
label		= sub {
		my $f = shift;
		my $nm = $f->name;
		return $nm if $nm;
		my ($lid) = $f->attributes('load_id');
		return $lid;
                }
key		= Landmarks

[Everything]
feature		= gene:SGD telomere:SGD centromere:SGD ARS:SGD tRNA:SGD rRNA:SGD snoRNA:SGD snRNA:SGD ncRNA:SGD gene_cassette:SGD repeat_region:SGD long_terminal_repeat:SGD LTR_retrotransposon:SGD
glyph		= \&rna_glyph
key		= All Annotated Sequence Features
description	= \&feat_desc
bgcolor		= \&orf_color
link		= http://www.yeastgenome.org/cgi-bin/locus.fpl?locus=$name
label		= 1
balloon hover width = 350
balloon hover   = sub { 
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my (@alias) = $f->attributes('alias');
		my ($gene) = $f->attributes('gene');
		my $aliaslist = join(', ', @alias);
		$aliaslist =~ s/$gene\, //;
		$aliaslist =~ s/$gene//;
		my ($orf) = $f->attributes('orf_classification');
		my ($dbxref) = $f->attributes('dbxref');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $strand = $f->strand;
		my $coord = "$ref\:$beg\.\.$end";
		$coord = "$ref\:$end\.\.$beg" if ($strand == -1);
		my @data;
		push @data, { Key => 'Gene Name:', Value => "$gene" } if $gene;
		push @data, { Key => 'ORF Name:', Value => "$name" };
		push @data, { Key => 'Alias:', Value => "$aliaslist" } if $aliaslist;
		push @data, { Key => 'Classification:', Value => "$orf" } if $orf;
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$coord" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Annotated Sequence Feature", \@data);
		}

[protGenes]
feature		= gene:SGD gene_cassette:SGD transposable_element_gene:SGD
glyph		= processed_transcript
stranded	= 1
strand_arrow	= 1
height		= 8
thin_utr	= 1
key		= Protein-coding Genes
description	= \&orf_class
bgcolor		= \&orf_color                }
link		= http://www.yeastgenome.org/cgi-bin/locus.fpl?locus=$name		      }
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my (@alias) = $f->attributes('alias');
		my $aliaslist = join(', ', @alias);
		my ($gene) = $f->attributes('gene');
		$aliaslist =~ s/$gene\, //;
		$aliaslist =~ s/$gene//;
		my ($orf) = $f->attributes('orf_classification');
		my ($dbxref) = $f->attributes('dbxref');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $strand = $f->strand;
		my $coord = "$ref\:$beg\.\.$end";
		$coord = "$ref\:$end\.\.$beg" if ($strand == -1);
		my @data;
		push @data, { Key => 'Gene Name:', Value => "$gene" } if $gene;
		push @data, { Key => 'ORF Name:', Value => "$name" };
		push @data, { Key => 'Alias:', Value => "$aliaslist" } if $aliaslist;
		push @data, { Key => 'Classification:', Value => "$orf" } if $orf;
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$coord" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Protein encoding Gene", \@data);
		}
[rnaGene]
feature		= tRNA:SGD snoRNA:SGD snRNA:SGD rRNA:SGD ncRNA:SGD nc_primary_transcript:SGD
fgcolor		= black
#glyph		= processed_transcript
glyph		= \&rna_glyph
key		= Non-coding RNA Genes
description	= \&feat_desc
bgcolor		= \&strand_color
link		= http://www.yeastgenome.org/cgi-bin/locus.fpl?locus=$name
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my ($dbxref) = $f->attributes('dbxref');
		my (@alias) = $f->attributes('alias');
		my $aliaslist = join(', ', @alias);
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $strand = $f->strand;
		my $coord = "$ref\:$beg\.\.$end";
		$coord = "$ref\:$end\.\.$beg" if ($strand == -1);
		my @data;
		push @data, { Key => 'Name:', Value => "$name" };
		push @data, { Key => 'Alias:', Value => "$aliaslist" } if $aliaslist;
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$coord" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Non-coding RNA Gene", \@data);
		}

[Structural Gene]
feature		= telomere:SGD centromere:SGD ARS:SGD repeat_region:SGD
fgcolor		= orange
glyph		= generic
key		= Telomere, Centromere and ARS elements
description	= \&feat_desc
bgcolor		= \&strand_color
link		= http://www.yeastgenome.org/cgi-bin/locus.fpl?locus=$name
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my (@alias) = $f->attributes('alias');
		my $aliaslist = join(', ', @alias);
		my ($dbxref) = $f->attributes('dbxref');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $strand = $f->strand;
		my $coord = "$ref\:$beg\.\.$end";
		$coord = "$ref\:$end\.\.$beg" if ($strand == -1);
		my @data;
		push @data, { Key => 'Name:', Value => "$name" };
		push @data, { Key => 'Alias:', Value => "$aliaslist" } if $aliaslist;
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$coord" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Telomere, Centromere and ARS elements", \@data);
		}

[Transp]
feature		= transposable_element_gene:SGD long_terminal_repeat:SGD LTR_retrotransposon:SGD
glyph		= segments
bgcolor		= yellow
fgcolor		= black
height		= 6
stranded	= 1
key		= Transposons & Long Terminal Repeats
description	= \&feat_desc
link		= http://www.yeastgenome.org/cgi-bin/locus.fpl?locus=$name
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my (@alias) = $f->attributes('alias');
		my $aliaslist = join(', ', @alias);
		my ($dbxref) = $f->attributes('dbxref');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $strand = $f->strand;
		my $coord = "$ref\:$beg\.\.$end";
		$coord = "$ref\:$end\.\.$beg" if ($strand == -1);
		my @data;
		push @data, { Key => 'Name:', Value => "$name" };
		push @data, { Key => 'Alias:', Value => "$aliaslist" } if $aliaslist;
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$coord" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Transposons & Long Terminal Repeats", \@data);
		}

[TranslationF]
glyph		= translation
global feature	= 1
frame0		= cadetblue
frame1		= blue
frame2		= darkblue
height		= 20
fgcolor		= purple
strand		= +1
translation	= 3frame
start_codons	= 0
key		= 3-frame translation (forward)
codontable	= \&codontable_check
citation	= This track shows the position of stop codons at low magnifications,
		and the 3-frame translation at high magnifications. Only the forward strand
		is shown.

[DNA/GC Content]
glyph		= dna
global feature	= 1
height		= 30
do_gc		= 1
fgcolor		= red
axis_color	= blue
strand		= both
key		= DNA/GC Content

[TranslationR]
glyph		= translation
global feature	= 1
frame0		= darkred
frame1		= red
frame2		= crimson
height		= 20
fgcolor		= blue
strand		= -1
translation	= 3frame
start_codons	= 0
key		= 3-frame translation (reverse)
codontable	= \&codontable_check
citation	= This track shows the position of stop codons at low magnifications,
		and the 3-frame translation at high magnifications. Only the reverse
		strand is shown.

[Primers]
feature		= primer
fgcolor		= purple
glyph		= segments
key		= ResGen primers
description	= \&pcr_desc
bgcolor		= purple
link		= AUTO
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my ($seq) = $f->attributes('Sequence');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $length = $f->length . " bp";
		my @data;
		push @data, { Key => 'Name:', Value => "$name" };
		push @data, { Key => 'Sequence:', Value => "$seq" };
		push @data, { Key => 'Coordinates:', Value => "$ref\:$beg\.\.$end" };
		push @data, { Key => 'Length:', Value => "$length" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("ResGen Primer", \@data);
		}

[Product]
feature		= PCR_product
glyph		= primers
bgcolor		= purple
key		= ResGen primer products
description	= \&pcr_desc
link		= AUTO
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my @data;
		push @data, { Key => 'Name:', Value => "$name" };
		push @data, { Key => 'Coordinates:', Value => "$ref\:$beg\.\.$end" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Predicted PCR products from ResGen primers", \@data);
		}

[Clone]
feature		= clone
fgcolor		= black
glyph		= generic
key		= Genomic Clones
height		= 5
description	= 1
bgcolor		= black
link		= http://www.yeastgenome.org/cgi-bin/quickSearch.fpl?query=$name
citation	= Lambda and cosmid clones created and mapped by Olson and
		Riles at WashU. Riles L; Dutchik JE; Baktha A;
		McCauley BK; Thayer EC; Leckie MP; Braden VV; Depke
		JE; Olson MV. (1993) Physical maps of the six
		smallest chromosomes of Saccharomyces cerevisiae at a
		resolution of 2.6 kilobase pairs. Genetics 134:81-150
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		$name = "ATCC:$name";
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my (@alias) = $f->attributes('alias');
		my $aliaslist = join(', ', @alias);
		my ($dbxref) = $f->attributes('dbxref');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $length = $f->length . " bp";
		my @data;
		push @data, { Key => 'Name:', Value => "$name" };
		push @data, { Key => 'Alias:', Value => "$aliaslist" } if $aliaslist;
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$ref\:$beg\.\.$end" };
		push @data, { Key => 'Length:', Value => "$length" };
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Genomic Clone", \@data);
		}

[Harbison]
feature		= TF_binding_site
category	= Regulatory regions & binding sites
fgcolor		= black
glyph		= diamond
key		= Harbison, et al (2004)
height		= 6
bgcolor		= orange
label		= \&trunc_name
link		= \&TF_url
citation	= Harbison CT, Gordon DB, Lee TI, Rinaldi NJ, Macisaac KD, Danford TW, Hannett NM, Tagne JB, Reynolds DB, Yoo J, Jennings EG, Zeitlinger J, Pokholok DK, Kellis M, Rolfe PA, Takusagawa KT, Lander ES, Gifford DK, Fraenkel E, Young RA (2004) Transcriptional regulatory code of a eukaryotic genome. Nature 431(7004):99-104 [PMID:15343339]
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my ($dbxref) = $f->attributes('dbxref');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $length = $f->length . " bp";
		my @data;
		push @data, { Key => 'Description:', Value => "$desc" };
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$ref\:$beg\.\.$end" };
		push @data, { Key => 'Site Length:', Value => "$length" };
		hover("Source: Harbison, et al (2004) Nature 431:99-104", \@data);
		}

[Tachibana]
feature		= Region:15743812
category	= Regulatory regions & binding sites
fgcolor		= black
glyph		= diamond
key		= Tachibana, et al (2005)
height		= 6
bgcolor		= orange
description	= 1
link		= AUTO
citation	= Tachibana C, Yoo JY, Tagne JB, Kacherovsky N, Lee TI, Young ET (2005) Combined global localization analysis and transcriptome data identify genes that are directly coregulated by Adr1 and Cat8. Mol Cell Biol 25(6):2138-46 [PMID:15743812]
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		$name =~ s/-/ /g;
		my ($desc) = $f->attributes('Note');
		$desc =~ s/[\'\"]//g;
		my ($dbxref) = $f->attributes('dbxref');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $length = $f->length . " bp";
		my @data;
		push @data, { Key => 'Description:', Value => "$name" };
		push @data, { Key => 'SGDID:', Value => "$dbxref" } if $dbxref;
		push @data, { Key => 'Coordinates:', Value => "$ref\:$beg\.\.$end" };
		push @data, { Key => 'ChIP-CHIP hit to:', Value => "$desc" } if $desc;
		push @data, { Key => 'CHIP spot Length:', Value => "$length" };
		hover("Source: Tachibana et al (2005) MCB 25:2138-2146", \@data);
		}

[uORF]
feature		= uORF
category	= Regulatory regions & binding sites
fgcolor		= black
glyph		= diamond
key		= uORFs
height		= 6
bgcolor		= black
label		= \&trunc_name
link		= AUTO
citation	= Small upstream open reading frame (uORF) that precedes the major open reading frame (ORF). uORFs usually inhibit downstream translation by blocking ribosomal scanning to promote efficient termination. In some cases, uORFs stimulate translation of the major ORF by allowing scanning ribosomal subunits to proceed via leaky scanning and reinitiation to the major ORF.
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\-uORF-S\d+//;
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my @data;
		push @data, { Key => 'Description:', Value => "uORF for $name" };
		push @data, { Key => 'Coordinates:', Value => "$ref\:$beg\.\.$end" };
		hover("uORFs", \@data);
		}

[SAGE]
feature		= SAGE_tag
glyph		= generic
bgcolor		= green
height		= 6
category	= Transcript Information
key		= SAGE tags - Velculescu et al (1997)
link		= AUTO
description	= \&pcr_desc
label		= \&seq_name
label		= 1
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my $name = $f->name;
		$name =~ s/\"\'//g;
		my ($desc) = $f->attributes('Note');
		my ($hits) = $f->attributes('Total_hit_count');
		my (@others) = $f->attributes('Other_hit_coordinates');
		my $other_coords = join(', ', @others);
		$desc =~ s/[\'\"]//g;
		my (@alias) = $f->attributes('alias');
		my $aliaslist = join(', ', @alias);
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my $length = $f->length . " bp";
		my @data;
		push @data, { Key => 'Sequence:', Value => "$name" };
		push @data, { Key => 'Coordinates:', Value => "$ref\:$beg\.\.$end" };
		push @data, { Key => 'Length:', Value => "$length" };
		push @data, { Key => 'Matches in Genome:', Value => "$hits" } if $hits;
		push @data, { Key => 'Other Coordinates:', Value => "$other_coords" } if $other_coords;
		push @data, { Key => 'Description:', Value => "$desc" } if $desc;
		hover("Source: Velculescu et al (1997) Cell 88:243-51", \@data);
		}

[Brow]
feature		= BrowPolII
category	= Polymerase occupancy
glyph		= xyplot
graph_type	= line
fgcolor		= sub {
			my $f = shift;
			my $source = $f->source;
			if ($source eq "17157256-sen1-PolII") {
			  return "green";
			} else {
			  return "blue";
			}
		}
bgcolor		= black
height		= 100
min_score	= -1
max_score	= 1
scale		= right
label		= 1
key		= Pol II distribution - Steinmetz, et al, (2006)
bump		= 0
link		= http://www.yeastgenome.org/cgi-bin/reference/reference.pl?pubmed=17157256
citation	= Steinmetz EJ, Warren CL, Kuehner JN, Panbehi B, Ansari AZ, and Brow DA (2006) Genome-wide distribution of yeast RNA polymerase II and its control by Sen1 helicase. Molecular Cell 24(5):735-746 [PMID:17157256]
balloon hover width = 350
balloon hover	= sub {
		my @data;
		push @data, { Key => 'Title:', Value => "Genome-wide distribution of yeast RNA polymerase II and its control by Sen1 helicase." };
		push @data, { Key => 'Blue:', Value => "Wild-type Pol II enrichment. SEN1, MATalpha cells" };
		push @data, { Key => 'Green:', Value => "sen1 mutant enrichment. sen1-E1579K, MATa cells" };
		push @data, { Key => 'NCBI/GEO accession:', Value => "GPL4563, GSE6293" };
		hover("Source: Steinmetz et al (2006) Molecular Cell 24(5):735-746", \@data);
		}

[Miura]
feature		= cDNA_clone
bgcolor		= \&transcript_hit;
fgcolor		= \&transcript_hit;
glyph		= transcript2
height		= 5
category	= Transcript Information
key		= cDNA transcripts - Miura, et al (2006)
description	= 1
link		= AUTO
citation	= Miura F, Kawaguchi N, Sese J, Toyoda A, Hattori M, Morishita S, Ito T (2006) A large-scale full-length cDNA analysis to explore the budding yeast transcriptome. Proc Natl Acad Sci U S A 103(47):17846-51 [PMID:17101987]
label		= 0
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my ($poly) = $f->attributes('3\'-end_judgement');
		my ($assign) = $f->attributes('Assignment');
		my (@assocFeat) = $f->attributes('Associated_feature');
		my ($List) = join(', ', @assocFeat);
		my ($URL);
		my @allFeat;
		foreach (@assocFeat) {
		    my ($ORF, @desc) = split/\s/;
		    if ($ORF =~ /^Y[A-P][LR]\d{3}/) {
			$URL = "<a href=http://link.utgenome.org/yeast_sgd.php?orfname=".$ORF."&version=200601>".$ORF."</a>";
			push(@allFeat, $URL);
		    } 
		}
		my ($allURL) = join(',', @allFeat);
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $end = $f->end;
		my @data;
		if ($end - $beg < 2001) {
		    my $strand = $f->strand;
		    my $coord = "$ref\:$beg\.\.$end";
		    $coord = "$ref\:$end\.\.$beg" if ($strand == -1);
		    push @data, { Key => '3\'-end:', Value => "$poly" } if $poly;
		    push @data, { Key => 'cDNA hit:', Value =>"$assign" } if $assign;
		    push @data, { Key => 'Feature(s):', Value => "$List" } if $List;
		    push @data, { Key => 'Coordinates:', Value => "$coord" } if $coord;
		    push @data, { Key => 'Oranges:', Value => "cDNAs with a perfect G-cap.<br>Dark: cDNA hit is unique<br>Light: cDNA hits multiple genomic locations" };
		    push @data, { Key => 'Blues:', Value => "cDNAs without a perfect G-cap.<br>Dark: cDNA hit is unique<br>Light: cDNA hits multiple genomic locations" };
		    push @data, { Key => 'More info:', Value => "Regions with >100 cDNAs are summarized as a single bar. Histogram view available for regions >20 kb." };
		    push @data, { Key => 'Additional data:', Value => "View $allURL at the UT Genome Browser." } if $allURL;
		} else {
		    push @data, { Key => 'Histogram:', Value => "The histogram shows the number of transcripts found in each region.  To view transcripts, select a region smaller than 20 kb." }
	        }
		hover("Source: Miura et al (2006) Proc Natl Acad Sci U S A 103(47):17846-51", \@data);
	        }

[Miura:20001]
feature		= cDNA_density
glyph		= xyplot
graph_type	= boxes
bgcolor		= darkgreen
height		= 100
scale		= right
link		= ""
bump		= 0

[Zhang]
feature		= transcription_start_site
fgcolor		= orangered
glyph		= arrow
parallel	= 0
northeast	= 1
height		= 10
linewidth	= 2
category	= Transcript Information
key		= Transcription start sites - Zhang and Dietrich (2005)
citation	= Zhang Z, Dietrich FS (2005) Mapping of transcription start sites in Saccharomyces cerevisiae using 5\' SAGE. Nucleic Acids Res 33(9):2838-51 [PMID:15905473]
label		= 0
link		= AUTO
balloon hover width = 350
balloon hover	= sub {
		my $f = shift;
		my ($freq) = $f->attributes('Frequency');
		my ($assocFeat) = $f->attributes('Associated_orf');
		my $ref = $f->seqname;
		my $beg = $f->start;
		my $strand = $f->strand;
		my $coord = "$ref\:$beg";
		my @data;
		push @data, { Key => 'Frequency of occurrence:', Value => "$freq" };
		push @data, { Key => 'Associated ORF:', Value => "$assocFeat" };
		push @data, { Key => 'Coordinate:', Value => "$coord" };
		push @data, { Key => 'Title:', Value => "Mapping of transcription start sites in Saccharomyces cerevisiae using 5\' SAGE." };
		hover("Source: Zhang and Dietrich (2005) Nucleic Acids Res 33(9):2838-51", \@data);
		}
	
[OligoFinder:plugin]
search_segments	= ChrI ChrII ChrIII ChrIV ChrV ChrVI ChrVII ChrVIII ChrIX ChrX ChrXI ChrXII ChrXIII ChrXIV ChrXV ChrXVI ChrMito

[ExportFeatures:plugin]
editor		= Artemis
aggregator = on

