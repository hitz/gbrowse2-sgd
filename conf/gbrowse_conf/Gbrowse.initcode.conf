init_code =	sub orf_color {
			my $feature = shift;
			my ($orfclass) = $feature->attributes('orf_classification');
			my $type = $feature->type;
			return 'black' if ($type =~ /transcribed_spacer/);
			return 'lightgrey' if ($orfclass eq "Dubious");
			return 'peachpuff' if ($orfclass eq "Uncharacterized");
			return 'red' if ($orfclass eq "Verified");
			return 'green' if ($orfclass eq "silenced_gene:Verified");
			return 'brown' if ($orfclass eq "silenced_gene");
			return 'wheat';
		}
		sub uorf_color {
			my $feature = shift;
			my $name = $feature->name;
			return ($name =~ /uORF/i ? 'black' : 'orange');
		}
		sub orf_class {
			my $feature = shift;
			my ($gene) = $feature->attributes('gene');
			my ($orfclass) = $feature->attributes('orf_classification');
			return "$gene, $orfclass" if ( defined($gene) && defined($orfclass));
			return "$orfclass" if ( defined($orfclass) );
			return $feature->attributes('Note');
		}
		sub feat_desc {
			my $feature = shift;
			my ($gene) = $feature->attributes('gene');
			my ($desc) = $feature->attributes('Note');
			my ($orfclass) = $feature->attributes('orf_classification');
	 		$desc =~ s/^([^;\.]*?)[;,\.] .*/$1/;
			#$desc =~ s/; .+//;
			#$desc =~ s/, .+//;
			#$desc =~ s/\. .+//;
			my $rtnstr = "";
			$rtnstr = "$gene, " if ( defined($gene) );
			$rtnstr .= "$orfclass, " if ( defined($orfclass) );
			$rtnstr .= "$desc" if ( defined($desc) );
			return "$rtnstr";
		}
		sub pcr_desc {
			my $feature = shift;
			my ($desc) = $feature->attributes('Note');
			my $rtnstr = "";
			$rtnstr .= "$desc" if ( defined($desc) );
			return "$rtnstr";
		}
		sub strand_color {
			shift->strand > 0 ? 'violet' : 'turquoise';
		}
		sub codontable_check {
			my $feature = shift;
			my $ref = $feature->seq_id;
			# or $feature->ref for older bioperl
			return $ref =~ /Mit/i ? 3 : 1;
		}
		sub trunc_name {
			my $feature = shift;
			my $name = $feature->name;
			$name =~ s/\-S\d+//;
			return $name;
		}
		sub seq_name {
			my $feature = shift;
			my ($name) = $feature->attributes('sage_tag_sequence');
			return "$name";
		}
		sub TF_url {
			my $feature = shift;
			my $name = $feature->name;
			$name =~ s/\-S\d+//;
			return "/cgi-bin/gbrowse/scgenome/?name=$name";
		}
		sub seq_color {
			my $feature = shift;
			my ($change) = $feature->attributes('change');
			return 'midnightblue' if ($change eq "IntronExonChange");
			return 'mintcream' if ($change eq "merger");
			return 'cyan' if ($change eq "CtermChange");
			return 'cornflowerblue' if ($change eq "NtermChange");
			return 'fuchsia' if ($change eq "NewORF");
			return 'yellow' if ($change eq "Deletion");
			return 'orange' if ($change eq "Insertions");
			return 'firebrick' if ($change eq "Substitution");
		}
		sub transcript_hit {
			my $feature = shift;
			my ($G) = $feature->attributes('G-cap_judgement');
			my ($hit) = $feature->attributes('genomic_hit');
			return 'orangered' if ( ($G =~ /perfect/i) && ($hit =~ /single\sgenomic\slocus/i) );
			return 'peachpuff' if ( ($G =~ /perfect/i) && ($hit =~ /multiple\sgenomic\sloci/i) );
			return 'darkblue' if ( ($G !~ /perfect/i) && ($hit =~ /single\sgenomic\slocus/i) );
			return 'lightsteelblue' if ( ($G !~ /perfect/i) && ($hit =~ /multiple\sgenomic\sloci/i) );
		}
		sub rna_glyph{ 
			my $f = shift;
			my $type = $f->type;
			return "line" if ( ($type =~ /^region/) || ($type =~ /transcribed_spacer_region/) );
			#return "processed_transcript";
                        return "gene";
		}
		sub hover {
			my ($name, $data) = @_;
			my $tab = "<table><tr><th align=left colspan=2>$name</th></tr>";
			for my $dat (@$data) {
			   $tab .= "<tr><td>$dat->{Key}</td><td>$dat->{Value}</td></tr>";
			}
			return $tab . "</table>";
		}
